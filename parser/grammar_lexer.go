// Generated from Grammar.g4 by ANTLR 4.7.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 29, 171,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23,
	9, 23, 4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9,
	28, 4, 29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 3, 2, 3, 2,
	3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 4,
	3, 4, 5, 4, 81, 10, 4, 3, 4, 7, 4, 84, 10, 4, 12, 4, 14, 4, 87, 11, 4,
	3, 4, 3, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 9, 3, 9,
	3, 10, 3, 10, 3, 11, 3, 11, 3, 12, 3, 12, 3, 13, 3, 13, 3, 13, 3, 14, 3,
	14, 3, 14, 3, 15, 3, 15, 3, 15, 3, 16, 3, 16, 3, 16, 3, 17, 3, 17, 3, 18,
	3, 18, 3, 18, 3, 19, 3, 19, 3, 20, 3, 20, 3, 20, 3, 21, 3, 21, 3, 21, 3,
	22, 3, 22, 3, 22, 3, 23, 3, 23, 3, 24, 3, 24, 3, 25, 3, 25, 3, 26, 6, 26,
	142, 10, 26, 13, 26, 14, 26, 143, 3, 27, 3, 27, 3, 27, 7, 27, 149, 10,
	27, 12, 27, 14, 27, 152, 11, 27, 3, 28, 6, 28, 155, 10, 28, 13, 28, 14,
	28, 156, 3, 29, 3, 29, 3, 30, 3, 30, 3, 31, 3, 31, 3, 32, 6, 32, 166, 10,
	32, 13, 32, 14, 32, 167, 3, 32, 3, 32, 2, 2, 33, 3, 3, 5, 4, 7, 5, 9, 6,
	11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12, 23, 13, 25, 14, 27, 15, 29,
	16, 31, 17, 33, 18, 35, 19, 37, 20, 39, 21, 41, 22, 43, 23, 45, 24, 47,
	25, 49, 26, 51, 27, 53, 28, 55, 2, 57, 2, 59, 2, 61, 2, 63, 29, 3, 2, 8,
	3, 2, 94, 94, 4, 2, 36, 36, 94, 94, 3, 2, 36, 36, 3, 2, 50, 59, 5, 2, 67,
	92, 97, 97, 99, 124, 5, 2, 11, 12, 15, 15, 34, 34, 2, 174, 2, 3, 3, 2,
	2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2,
	2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3,
	2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 2, 25, 3, 2, 2, 2, 2, 27,
	3, 2, 2, 2, 2, 29, 3, 2, 2, 2, 2, 31, 3, 2, 2, 2, 2, 33, 3, 2, 2, 2, 2,
	35, 3, 2, 2, 2, 2, 37, 3, 2, 2, 2, 2, 39, 3, 2, 2, 2, 2, 41, 3, 2, 2, 2,
	2, 43, 3, 2, 2, 2, 2, 45, 3, 2, 2, 2, 2, 47, 3, 2, 2, 2, 2, 49, 3, 2, 2,
	2, 2, 51, 3, 2, 2, 2, 2, 53, 3, 2, 2, 2, 2, 63, 3, 2, 2, 2, 3, 65, 3, 2,
	2, 2, 5, 70, 3, 2, 2, 2, 7, 76, 3, 2, 2, 2, 9, 90, 3, 2, 2, 2, 11, 92,
	3, 2, 2, 2, 13, 94, 3, 2, 2, 2, 15, 96, 3, 2, 2, 2, 17, 98, 3, 2, 2, 2,
	19, 100, 3, 2, 2, 2, 21, 102, 3, 2, 2, 2, 23, 104, 3, 2, 2, 2, 25, 106,
	3, 2, 2, 2, 27, 109, 3, 2, 2, 2, 29, 112, 3, 2, 2, 2, 31, 115, 3, 2, 2,
	2, 33, 118, 3, 2, 2, 2, 35, 120, 3, 2, 2, 2, 37, 123, 3, 2, 2, 2, 39, 125,
	3, 2, 2, 2, 41, 128, 3, 2, 2, 2, 43, 131, 3, 2, 2, 2, 45, 134, 3, 2, 2,
	2, 47, 136, 3, 2, 2, 2, 49, 138, 3, 2, 2, 2, 51, 141, 3, 2, 2, 2, 53, 145,
	3, 2, 2, 2, 55, 154, 3, 2, 2, 2, 57, 158, 3, 2, 2, 2, 59, 160, 3, 2, 2,
	2, 61, 162, 3, 2, 2, 2, 63, 165, 3, 2, 2, 2, 65, 66, 7, 118, 2, 2, 66,
	67, 7, 116, 2, 2, 67, 68, 7, 119, 2, 2, 68, 69, 7, 103, 2, 2, 69, 4, 3,
	2, 2, 2, 70, 71, 7, 104, 2, 2, 71, 72, 7, 99, 2, 2, 72, 73, 7, 110, 2,
	2, 73, 74, 7, 117, 2, 2, 74, 75, 7, 103, 2, 2, 75, 6, 3, 2, 2, 2, 76, 85,
	7, 36, 2, 2, 77, 80, 7, 94, 2, 2, 78, 81, 10, 2, 2, 2, 79, 81, 7, 94, 2,
	2, 80, 78, 3, 2, 2, 2, 80, 79, 3, 2, 2, 2, 81, 84, 3, 2, 2, 2, 82, 84,
	10, 3, 2, 2, 83, 77, 3, 2, 2, 2, 83, 82, 3, 2, 2, 2, 84, 87, 3, 2, 2, 2,
	85, 83, 3, 2, 2, 2, 85, 86, 3, 2, 2, 2, 86, 88, 3, 2, 2, 2, 87, 85, 3,
	2, 2, 2, 88, 89, 7, 36, 2, 2, 89, 8, 3, 2, 2, 2, 90, 91, 7, 35, 2, 2, 91,
	10, 3, 2, 2, 2, 92, 93, 7, 41, 2, 2, 93, 12, 3, 2, 2, 2, 94, 95, 7, 125,
	2, 2, 95, 14, 3, 2, 2, 2, 96, 97, 7, 127, 2, 2, 97, 16, 3, 2, 2, 2, 98,
	99, 7, 42, 2, 2, 99, 18, 3, 2, 2, 2, 100, 101, 7, 43, 2, 2, 101, 20, 3,
	2, 2, 2, 102, 103, 7, 126, 2, 2, 103, 22, 3, 2, 2, 2, 104, 105, 7, 63,
	2, 2, 105, 24, 3, 2, 2, 2, 106, 107, 7, 128, 2, 2, 107, 108, 7, 63, 2,
	2, 108, 26, 3, 2, 2, 2, 109, 110, 7, 126, 2, 2, 110, 111, 7, 63, 2, 2,
	111, 28, 3, 2, 2, 2, 112, 113, 7, 63, 2, 2, 113, 114, 7, 126, 2, 2, 114,
	30, 3, 2, 2, 2, 115, 116, 7, 107, 2, 2, 116, 117, 7, 112, 2, 2, 117, 32,
	3, 2, 2, 2, 118, 119, 7, 64, 2, 2, 119, 34, 3, 2, 2, 2, 120, 121, 7, 64,
	2, 2, 121, 122, 7, 63, 2, 2, 122, 36, 3, 2, 2, 2, 123, 124, 7, 62, 2, 2,
	124, 38, 3, 2, 2, 2, 125, 126, 7, 62, 2, 2, 126, 127, 7, 63, 2, 2, 127,
	40, 3, 2, 2, 2, 128, 129, 7, 64, 2, 2, 129, 130, 7, 62, 2, 2, 130, 42,
	3, 2, 2, 2, 131, 132, 7, 62, 2, 2, 132, 133, 7, 64, 2, 2, 133, 44, 3, 2,
	2, 2, 134, 135, 7, 48, 2, 2, 135, 46, 3, 2, 2, 2, 136, 137, 7, 46, 2, 2,
	137, 48, 3, 2, 2, 2, 138, 139, 7, 60, 2, 2, 139, 50, 3, 2, 2, 2, 140, 142,
	5, 59, 30, 2, 141, 140, 3, 2, 2, 2, 142, 143, 3, 2, 2, 2, 143, 141, 3,
	2, 2, 2, 143, 144, 3, 2, 2, 2, 144, 52, 3, 2, 2, 2, 145, 150, 5, 61, 31,
	2, 146, 149, 5, 61, 31, 2, 147, 149, 5, 59, 30, 2, 148, 146, 3, 2, 2, 2,
	148, 147, 3, 2, 2, 2, 149, 152, 3, 2, 2, 2, 150, 148, 3, 2, 2, 2, 150,
	151, 3, 2, 2, 2, 151, 54, 3, 2, 2, 2, 152, 150, 3, 2, 2, 2, 153, 155, 5,
	57, 29, 2, 154, 153, 3, 2, 2, 2, 155, 156, 3, 2, 2, 2, 156, 154, 3, 2,
	2, 2, 156, 157, 3, 2, 2, 2, 157, 56, 3, 2, 2, 2, 158, 159, 10, 4, 2, 2,
	159, 58, 3, 2, 2, 2, 160, 161, 9, 5, 2, 2, 161, 60, 3, 2, 2, 2, 162, 163,
	9, 6, 2, 2, 163, 62, 3, 2, 2, 2, 164, 166, 9, 7, 2, 2, 165, 164, 3, 2,
	2, 2, 166, 167, 3, 2, 2, 2, 167, 165, 3, 2, 2, 2, 167, 168, 3, 2, 2, 2,
	168, 169, 3, 2, 2, 2, 169, 170, 8, 32, 2, 2, 170, 64, 3, 2, 2, 2, 11, 2,
	80, 83, 85, 143, 148, 150, 156, 167, 3, 8, 2, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'true'", "'false'", "", "'!'", "'''", "'{'", "'}'", "'('", "')'",
	"'|'", "'='", "'~='", "'|='", "'=|'", "'in'", "'>'", "'>='", "'<'", "'<='",
	"'><'", "'<>'", "'.'", "','", "':'",
}

var lexerSymbolicNames = []string{
	"", "", "", "TypeString", "R_NEGATE", "R_SIGLE_QUOTA", "R_BRACE_L", "R_BRACE_R",
	"R_BRACKET_L", "R_BRACKET_R", "R_PIPE", "R_EQ", "R_CONTAINS", "R_START_WITH",
	"R_END_WITH", "R_IN", "R_GT", "R_GTE", "R_LT", "R_LTE", "R_BETWEEN", "R_NOT_BETWEEN",
	"R_DOT", "R_COMA", "R_COLON", "T_INTEIRO", "ID", "WS",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "TypeString", "R_NEGATE", "R_SIGLE_QUOTA", "R_BRACE_L",
	"R_BRACE_R", "R_BRACKET_L", "R_BRACKET_R", "R_PIPE", "R_EQ", "R_CONTAINS",
	"R_START_WITH", "R_END_WITH", "R_IN", "R_GT", "R_GTE", "R_LT", "R_LTE",
	"R_BETWEEN", "R_NOT_BETWEEN", "R_DOT", "R_COMA", "R_COLON", "T_INTEIRO",
	"ID", "STRING_CHARS", "STRING_CHAR", "DIGITO", "CHARACTER", "WS",
}

type GrammarLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewGrammarLexer(input antlr.CharStream) *GrammarLexer {

	l := new(GrammarLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "Grammar.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// GrammarLexer tokens.
const (
	GrammarLexerT__0          = 1
	GrammarLexerT__1          = 2
	GrammarLexerTypeString    = 3
	GrammarLexerR_NEGATE      = 4
	GrammarLexerR_SIGLE_QUOTA = 5
	GrammarLexerR_BRACE_L     = 6
	GrammarLexerR_BRACE_R     = 7
	GrammarLexerR_BRACKET_L   = 8
	GrammarLexerR_BRACKET_R   = 9
	GrammarLexerR_PIPE        = 10
	GrammarLexerR_EQ          = 11
	GrammarLexerR_CONTAINS    = 12
	GrammarLexerR_START_WITH  = 13
	GrammarLexerR_END_WITH    = 14
	GrammarLexerR_IN          = 15
	GrammarLexerR_GT          = 16
	GrammarLexerR_GTE         = 17
	GrammarLexerR_LT          = 18
	GrammarLexerR_LTE         = 19
	GrammarLexerR_BETWEEN     = 20
	GrammarLexerR_NOT_BETWEEN = 21
	GrammarLexerR_DOT         = 22
	GrammarLexerR_COMA        = 23
	GrammarLexerR_COLON       = 24
	GrammarLexerT_INTEIRO     = 25
	GrammarLexerID            = 26
	GrammarLexerWS            = 27
)
